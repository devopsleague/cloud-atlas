// getBootstrapKeyFromStorage will list all keys that has prefix /bootstrap and will check for key that is
// hashed with empty string and will check for any key that is hashed by different token than the one
// passed to it, it will return error if it finds a key that is hashed with different token and will return
// value if it finds the key hashed by passed token or empty string
func getBootstrapKeyFromStorage(ctx context.Context, storageClient client.Client, normalizedToken, oldToken string) (*client.Value, bool, error) {
        emptyStringKey := storageKey("")
        tokenKey := storageKey(normalizedToken)
        bootstrapList, err := storageClient.List(ctx, "/bootstrap", 0)
        if err != nil {
                return nil, false, err
        }
        if len(bootstrapList) == 0 {
                return nil, true, nil
        }
        if len(bootstrapList) > 1 {
                logrus.Warn("found multiple bootstrap keys in storage")
        }
        // check for empty string key and for old token format with k10 prefix
        if err := migrateOldTokens(ctx, bootstrapList, storageClient, emptyStringKey, tokenKey, normalizedToken, oldToken); err != nil {
                return nil, false, err
        }

        // getting the list of bootstrap again after migrating the empty key
        bootstrapList, err = storageClient.List(ctx, "/bootstrap", 0)
        if err != nil {
                return nil, false, err
        }
        for _, bootstrapKV := range bootstrapList {
                // ensure bootstrap is stored in the current token's key
                if string(bootstrapKV.Key) == tokenKey {
                        return &bootstrapKV, false, nil
                }
        }

        return nil, false, errors.New("bootstrap data already found and encrypted with different token")
}
